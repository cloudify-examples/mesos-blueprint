tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - imports/openstack/blueprint.yaml
  - imports/scale.yaml

inputs:

  ####################################
  # INSTALL WORKFLOW INPUTS
  ####################################
  mesos_home:
    description: installation directory
    default: /home/ubuntu/mesos-0.28.2

  ####################################
  # BUILD_IMAGE WORKFLOW INPUTS
  ####################################

node_templates:

  master:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/start-master.sh
          inputs:
            process:
              env:
                MESOS_HOME: {concat: [{get_input: mesos_home}, "/build"]}
                HOST_IP: {get_attribute: [master_host,ip]}
    relationships:
      - target: master_host
        type: cloudify.relationships.contained_in

  slave:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/start-slave.sh
          inputs:
            process:
              env:
                MESOS_HOME: {concat: [{get_input: mesos_home}, "/build"]}
                MASTER_IP: {get_attribute: [ master_host, ip]}
                HOST_IP: {get_attribute: [slave_host,ip]}
                CONTAINERIZERS: docker,mesos
    relationships:
      - target: slave_host
        type: cloudify.relationships.contained_in


groups:

  openstack_scale_up_group:
    members: [slave_host]
     # This defines a scale group whose members may be scaled up, incrementing by 1.
     # The scale worflow is called when the following criteria are met
     # The Hyperkube process total CPU will be more than 3 for a total of 10 seconds.
     # No more than 6 hosts will be allowed.
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 50
          service_selector: .*slave_host.*cpu.total.system
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: slave
                scale_compute: true

  openstack_scale_down_group:
    # This defines a scale group whose members may be scaled down. Only one host will be removed per run.
    # The scale worflow is called when the following criteria are met
    # The Hyperkube process total CPU will be less than 1 for a total of 200 seconds.
    # No less than 2 hosts will be allowed.
    members: [slave_host]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 5
          service_selector: .*slave_host.*cpu.total.system
          cooldown_time: 60
          moving_window_size: 200
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: slave
                scale_compute: true

  heal_group:
    members: [slave_host]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*master_host.*cpu.total.system
            - .*slave_host.*cpu.total.system
          interval_between_workflows: 30
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

